import type { Metadata } from "next";
import { Geist, Geist_Mono, Pacifico } from "next/font/google";
import "./globals.css";
import Providers from "./providers";
import { PageLoadingProvider } from "@/components/providers/page-loading-provider";
import Header from "@/components/Header";
import ErrorBoundary from "@/components/ErrorBoundary";
import { Toaster } from 'react-hot-toast';
import dynamic from 'next/dynamic';

// Import the client component directly
import WelcomePopup from '@/components/WelcomePopupClient';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const pacifico = Pacifico({
  weight: '400',
  subsets: ["latin"],
  variable: '--font-pacifico',
});

export const metadata: Metadata = {
  title: "Immanuvel",
  icons: {
    icon: "/favicon.png",
  },
  keywords: ["Immanuvel", "Next.js", "React", "TypeScript","Portfolio"],
  authors: [
    {
      name: "Immanuvel",
    },
  ],
  creator: "Immanuvel",
  publisher: "Immanuvel",
  description: "Generated by create next app",
  verification: {
    google: "mPfU4gmz2hZbYQTnwbs8gbWsMCbLtWzzZ6l1uSqatAQ",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${geistSans.variable} ${geistMono.variable} ${pacifico.variable} antialiased`} suppressHydrationWarning>
      <head>
        <meta name="google-site-verification" content="mPfU4gmz2hZbYQTnwbs8gbWsMCbLtWzzZ6l1uSqatAQ" />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} ${pacifico.variable} font-sans bg-gray-950 text-white min-h-screen`}>
        <ErrorBoundary>
          <PageLoadingProvider>
            <Providers>
              <Header />
              <main className="min-h-screen">
                {children}
              </main>
              <WelcomePopup />
              <Toaster position="bottom-center" />
            </Providers>
          </PageLoadingProvider>
        </ErrorBoundary>
      </body>
    </html>
  );
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth.token.email == "rvimman@gmail.com";
    }

    // Blog posts collection rules
    match /blog-posts/{postId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Only authenticated users can create posts
      allow create: if request.auth != null 
        && request.resource.data.keys().hasAll(['title', 'content', 'author', 'authorId', 'createdAt'])
        && request.resource.data.authorId == request.auth.uid;
      
      // Only the post author or admin can update
      allow update: if request.auth != null && (
        resource.data.authorId == request.auth.uid || isAdmin()
      );
      
      // Only the post author or admin can delete
      allow delete: if request.auth != null && (
        resource.data.authorId == request.auth.uid || isAdmin()
      );
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read access to authenticated users
      allow read: if request.auth != null;
      
      // Only allow writing if:
      // 1. Creating a new user (request.resource.data.id is null)
      // 2. Updating your own profile
      allow write: if request.auth != null && (
        request.resource.data.id == null ||
        request.auth.uid == userId
      );
    }

    // Allow public read access to comments
    match /comments/{commentId} {
      allow read: if true;
      
      // Allow create if user is authenticated and document is properly formatted
      allow create: if request.auth != null 
        && request.resource.data.keys().hasAll(['uid', 'displayName', 'photoURL', 'content', 'timestamp', 'upvotes', 'downvotes'])
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.content is string
        && request.resource.data.upvotes == 0
        && request.resource.data.downvotes == 0;
      
      // Allow updates for voting and pinning
      allow update: if request.auth != null && (
        // Allow vote updates
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'downvotes']))
        ||
        // Allow admin to pin/unpin
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPinned']))
      );
      
      // Allow delete if user is admin or comment author
      allow delete: if request.auth != null && (
        isAdmin() || resource.data.uid == request.auth.uid
      );
    }
  }
}
